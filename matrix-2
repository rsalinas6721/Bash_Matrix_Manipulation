#!/bin/bash

#----------------------------
# Ricky Salinas
# Due Date: 14 October 2019
# OSU CS_344
#----------------------------

dims(){
#----------------------------
# Input to Transpose function is validated
# The following if statement makes sure that:
#   1. Contains the required number of Arguments
#   2. File one is readable
#   3. File two is readable
# If any parameter fails, the program displays error to stderr and exits 1
#----------------------------
    datafilepath="datafile$$"
    if [ "$#" -eq 1 ]
    then
        cat > "$datafilepath"
    elif [ "$#" -eq 2 ]
    then
        datafilepath=$2
        if [ ! -r $datafilepath ]
        then
            echo "The File Is Unreadable" 1>&2
            exit 1
        fi
    elif [ "$#" -ne 2 ] || [ "$#" -ne 1 ]
    then
        echo "Invalid Number Of Arguments Entered" 1>&2
        exit 1
    fi

#----------------------------
# Column variable is intitialized
# Columns for file are identified with head command
# Column variable is assignned to colNum
#----------------------------
    colNum=0
    colNum=$(head -n 1 $datafilepath | wc -w)

#----------------------------
# Row number is taken from file
# Value is retrievd by reading through the file and counting the number of lines
# Value are placed within varables named rowNum
#----------------------------
    rowNum=0
    while read line
    do
        rowNum=$((rowNum+1))
    done <$datafilepath

#----------------------------
# File rows and colums are displayed based on asignment requirements
#----------------------------
    echo "$rowNum $colNum"

#----------------------------
# Program exits with 0
#----------------------------
exit 0
}

transpose(){
#----------------------------
# Input to Transpose function is validated
# The following if statement makes sure that:
#   1. Contains the required number of Arguments
#   2. File one is readable
#   3. File two is readable
# If any parameter fails, the program displays error to stderr and exits 1
#----------------------------

    datafilepath="datafile$$"
    if [ "$#" -eq 1 ]
    then
        cat > "$datafilepath"
    elif [ "$#" -eq 2 ]
    then
        datafilepath=$2
        if [ ! -r $datafilepath ]
        then
            echo "The File Is Unreadable" 1>&2
            exit 1
        fi
    elif [ "$#" -ne 2 ] || [ "$#" -ne 1 ]
    then
            echo "Invalid Number Of Arguments Entered" 1>&2
            exit 1
    fi

#----------------------------
# Column variable is intitialized
# Columns for file are identified with head command piped into wc
#----------------------------
    colNum=0
    colNum=$(head -n 1 $datafilepath | wc -w)

    while read line
    do
      rowNum=$((rowNum+1))
    done <$datafilepath
    num=0

#----------------------------
# Values from file one are placed within array
# Each line of the list is first taken in as a variable
# The line is then modified with the tr command to make tabs or spaces equal to ' '
# Each vaue within the line is then cut for the amount of columns within the File
# The values are added into an array
# This occurs for every line in the matrix
#----------------------------
    counter=0
    array=()
    while read one
    do
        i=0
        x=1
        while [[ $i -lt $colNum ]]
        do
            num=$(echo $one | tr -s ' ' | cut -d ' ' -f $x)
            array[counter]=$num
            counter=$((counter+1))
            i=$((i+1))
            x=$((x+1))
        done
    done <$datafilepath

#----------------------------
# Values are taken in from array and reordered by their location in their column
# The program runs through a while loop for the number of values in the array
# For Example:
#   1   2   3    -->     1   4   7
#   4   5   6    -->     2   5   8
#   7   8   9    -->     3   6   9
#
#   The loop runs as follows:
#           Location is taken from first array; TMP value is made
#           Column Size is added to find next value
#           Column size continues to be added until the numer excedes length of array
#           If length is exceded, TMP vlaue is taken incremented by 1.
#           A new TMP value is made; and cycle continues
#
# The result is a reorderd version of the array named finArray
#----------------------------
    len=${#array[@]}
    counter=0
    finArray=()
    cnt=0
    val=0
    while [[ $counter -lt $len ]]
    do

        if [[ $val -ge $len ]]
        then
            tmp=$(($tmp + 1))
            val=$tmp
        fi
        finArray[cnt]=${array[val]}
        cnt=$((cnt+1))
        val=$((colNum + val))
        counter=$((counter+1))
    done

#----------------------------
# Final result rows and colums are displayed based on asignment requirements
# This is done by cycling through the finArray for the appropriate Values
#----------------------------
    ittr=1
    for i in ${finArray[@]}
    do
        if [[ $ittr -eq $rowNum ]]
        then
            echo "$i"
            ittr=1
            continue
        fi
        echo -n "$i	"
        ittr=$((ittr+1))
    done

#----------------------------
# Program exits with 0
#----------------------------
exit 0
}

add(){
#----------------------------
# Input to multiply function is validated
# The following if statement makes sure that:
#   1. Contains the required number of Arguments
#   2. File one is readable
#   3. File two is readable
# If any parameter fails, the program displays error to stderr and exits 1
#----------------------------
    if [[ "$#" -ne 3 ]]
    then
      echo "Invalid Number Of Arguments Entered" 1>&2
      exit 1

    elif [[ ! -r $2 ]]
    then
      echo "The First File Is Unreadable" 1>&2
      exit 1

  elif [[ ! -r $3 ]]
    then
       echo "The Second File Is Unreadable" 1>&2
       exit 1
    fi
    rowNumOne=0
    rowNumTwo=0
    colNumOne=0
    colNumTwo=0

#----------------------------
# Row number is taken from file 1 and file 2
# Values are retrieevd by reading through the file and counting the number of lines
# Values are placed within varables named rowNumOne and rowNumTwo
#----------------------------
    while read lineOne
    do
      rowNumOne=$((rowNumOne+1))
    done <$2

    while read lineTwo
    do
      rowNumTwo=$((rowNumTwo+1))
    done <$3

#----------------------------
# Column variables are intitialized
# Columns for files are identified with head command piped into wc
# Column variables are assignned to colNumOne colNumTwo
#----------------------------
    colNumOne=$(head -n 1 $2 | wc -w)
    colNumTwo=$(head -n 1 $3 | wc -w)

#----------------------------
# Check for Mismatched Matricies By Comparing Rows and Columns of Both files
# If an error is found:
#   - An error message is printed to stderr
#   - Program exits with 1
#----------------------------
    if [[ $rowNumOne -ne $rowNumOne ]]
    then
	    echo "Mismatched Matricies" 1>&2
	    exit 1

    elif [[ $colNumOne -ne $colNumTwo ]]
    then
        echo "Mismatched Matricies" 1>&2
        exit 1
    fi

#----------------------------
# Values from fileOne are placed within arrayOne
# Each line of the list is first taken in as a variable
# The line is then modified with the tr command to make tabs or spaces equal to ' '
# Each vaue within the line is then cut for the amount of columns within the File
# The values are added into an array named arrayOne
# This occurs for every line in the matrix
#----------------------------
    counterOne=0
    arrayOne=()
    while read one
    do
        i=0
        x=1
        while [[ $i -lt $colNumOne ]]
        do
            numOne=$(echo $one | tr -s ' ' | cut -d ' ' -f $x)
            arrayOne[counterOne]=$numOne
            counterOne=$((counterOne+1))
            i=$((i+1))
            x=$((x+1))
        done
    done <$2

#----------------------------
# Values from fileTwo are placed within arrayTwo
# Each line of the list is first taken in as a variable
# The line is then modified with the tr command to make tabs or spaces equal to ' '
# Each vaue within the line is then cut for the amount of columns within the File
# The values are added into an array named arrayTwo
# This occurs for every line in the matrix
#----------------------------
    counterTwo=0
    arrayTwo=()
    while read two
    do
        i=0
        x=1
        while [[ $i -lt $colNumTwo ]]
        do
            numTwo=$(echo $two | tr -s ' ' | cut -d ' ' -f $x)
            arrayTwo[counterTwo]=$numTwo
            counterTwo=$((counterTwo+1))
            i=$((i+1))
            x=$((x+1))
        done
    done <$3

#----------------------------
#Values are added to SumArr
#----------------------------
    count=0
    sumArr=()
    val=0
    for i in ${arrayOne[@]}
    do
        val=$i
        sumArr[count]=$val
        count=$((count + 1))
    done

#----------------------------
#Values are added to SumArray
#----------------------------
    count=0
    sum=0
    for i in ${arrayTwo[@]}
    do
        sum=${sumArr[count]}
        sum=$(( sum+i ))
        sumArr[count]=$sum
        count=$((count+1))
    done

#----------------------------
# Values from SumArr are displayed based on program requirements
#----------------------------
    len=${#sumArr[@]}
    ittr=1
    for i in ${sumArr[@]}
    do
        if [[ $ittr -eq $colNumOne ]]
        then
            echo "$i"
            ittr=1
            continue
        fi

        echo -n "$i	"
        ittr=$((ittr+1))
    done

#----------------------------
# Program exits with 0
#----------------------------
exit 0
}

mean(){
#----------------------------
# Function checks to see if a file was specified while running script
# If not, the program takes in stdin using the datafilepath variable
# If the program fails to retrieve the right number of parameters:
#	.an error is displayed to stderr and exits#
#----------------------------
    datafilepath="datafile$$"
    if [ "$#" -eq 1 ]
    then
        cat > "$datafilepath"
    elif [ "$#" -eq 2 ]
    then
        datafilepath=$2
        if [ ! -r $datafilepath ]
        then
            echo "The File Is Unreadable" 1>&2
            exit 1
        fi
    elif [ "$#" -ne 2 ] || [ "$#" -ne 1 ]
    then
            echo "Invalid Number Of Arguments Entered" 1>&2
            exit 1
    fi

#----------------------------
# Column variable is intitialized
# Column for file is identified with head command piped into wc
# Column variables are assignned to colNum
#----------------------------
    colNum=0
    colNum=$(head -n 1 $datafilepath | wc -w)

#----------------------------
# Row number is taken from the file
# Value is retrievd by reading through the file and counting the number of lines
#----------------------------
    while read line
    do
      rowNum=$((rowNum+1))
    done <$datafilepath

#----------------------------
# Values from file are placed within array
# Each line of the list is first taken in as a variable
# The line is then modified with the tr command to make tabs or spaces equal to ' '
# Each vaue within the line is then cut for the amount of columns within the File
# The values are added into an array named array
# This occurs for every line in the matrix
#----------------------------
    num=0
    counter=0
    array=()
    while read one
    do
        i=0
        x=1
        while [[ $i -lt $colNum ]]
        do
            num=$(echo $one | tr -s ' ' | cut -d ' ' -f $x)
            array[counter]=$num
            counter=$((counter+1))
            i=$((i+1))
            x=$((x+1))
        done
    done <$datafilepath

#----------------------------
# Values are added based on their cooresponding location within the file and array
# The resulting values are placed within finarray
# The values are prepared for the mean to be calculated accordingly
# Example:
#       2   2   2   -->     4   4   4
#       2   2   2
#----------------------------
    finArray=()
    arrCount=0
    count=$rowNum
    val=0
    for i in ${array[@]}
    do
        if [[ $arrCount -eq $colNum ]]
        then
            arrCount=0
        fi
        val=${finArray[arrCount]}
        val=$((i+val))
        finArray[arrCount]=$val
        arrCount=$((arrCount+1))
        val=0
    done

#----------------------------
# Values displayed using finArray based on the assignment requirements
# Mean is calculated
# Mean calculation was taken from lecture
#----------------------------
    count=1
    mean=0
    for x in ${finArray[@]}
    do
        mean=$((  (x + (rowNum/2)*( (x>0)*2-1 )) / rowNum  ))
        if [ $count -eq $colNum ]
            then
            echo "$mean"
            count=$((count+1))
        elif [ $count -ne $colNum ]
            then
            echo -n -e "$mean\t"
            count=$((count+1))
        fi
    done
}

multiply(){
#----------------------------
# Input to multiply function is validated
# The following if statement makes sure that:
#   1. Contains the required number of Arguments
#   2. File one is readable
#   3. File two is readable
# If any parameter fails, the program displays error to stderr and exits 1
#----------------------------
    if [[ "$#" -ne 3 ]]
    then
      echo "Invalid Number Of Arguments Entered" 1>&2
      exit 1

    elif [[ ! -r $2 ]]
    then
      echo "The First File Is Unreadable" 1>&2
      exit 1

    elif [[ ! -r $3 ]]
    then
       echo "The Second File Is Unreadable" 1>&2
       exit 1
    fi
#----------------------------
# Values are Initialized
#----------------------------
    rowNumOne=0
    rowNumTwo=0
    colNumOne=0
    colNumTwo=0

#----------------------------
# Row number is taken from file 1 and file 2
# Values are retrievd by reading through the file and counting the number of lines
# Values are placed within varables named rowNumOne and rowNumTwo
#----------------------------
    while read lineOne
    do
      rowNumOne=$((rowNumOne + 1))
    done <$2

    while read lineTwo
    do
      rowNumTwo=$((rowNumTwo + 1))
    done <$3

#----------------------------
# Column variables are intitialized
# Columns for files one and two are identified with head command piped into wc
# Column variables are assignned to colNumOne colNumTwo
#----------------------------
    colNumOne=$(head -n 1 $2 | wc -w)
    colNumTwo=$(head -n 1 $3 | wc -w)

#----------------------------
# Check for Mismatched Matricies
# If an error is found:
#   - An error message is printed to stderr
#   - Program exits with 1
#----------------------------
    if [[ $rowNumTwo -ne $colNumOne ]]
    then
	    echo "Mismatched Matricies" 1>&2
	    exit 1
    fi

#----------------------------
# Values from fileOne are placed within arrayOne
# Each line of the list is first taken in as a variable
# The line is then modified with the tr command to make tabs or spaces equal to ' '
# Each vaue within the line is then cut for the amount of columns within the File
# The values are added into an array named arrayOne
# This occurs for every line in the matrix
#----------------------------
    counterOne=0
    arrayOne=()
    while read one
    do
        i=0
        x=1
        while [[ $i -lt $colNumOne ]]
        do
            numOne=$(echo $one | tr -s ' ' | cut -d ' ' -f $x)
            arrayOne[counterOne]=$numOne
            counterOne=$((counterOne+1))
            i=$((i+1))
            x=$((x+1))
        done
    done <$2

#----------------------------
# Values from fileTwo are placed within arrayOne
# Each line of the list is first taken in as a variable
# The line is then modified with the tr command to make tabs or spaces equal to ' '
# Each vaue within the line is then cut for the amount of columns within the File
# The values are added into an array named arrayTwo
# This occurs for every line in the matrix
#----------------------------
    counterTwo=0
    arrayTwo=()
    while read two
    do
        i=0
        x=1
        while [[ $i -lt $colNumTwo ]]
        do
            numTwo=$(echo $two | tr -s ' ' | cut -d ' ' -f $x)
            arrayTwo[counterTwo]=$numTwo
            counterTwo=$((counterTwo+1))
            i=$((i+1))
            x=$((x+1))
        done
    done <$3

#----------------------------
# Array Two is reformatted to later make multiplication easier
# An array taken in as:
#       1   2   -->     [1,   2,   5,   2,   4,   6]
#       2   4
#       5   6
#
# These values are added to an arrray named arrayThree()
#----------------------------
    len=${#arrayTwo[@]}
    arrayThree=()
    countThree=0
    count=1
    ITTR=0
    outerLoop=0
    i=0
    while [[ $outerLoop -lt $colNumTwo ]]
    do
        while [[ $i -lt $len ]]
        do
            arrayThree[ITTR]=${arrayTwo[i]}
            ITTR=$((ITTR+1))
            i=$((i + colNumTwo))
        done
        outerLoop=$((outerLoop+1))
        i=$outerLoop
    done

#----------------------------
# Arrays are multiplied values are placed within fin array
# Function takes in two arrays: arrayOne and arrayThree
# The program itterates through both arrays multiplying the appropriate Values
# The resulting values are contained within a variable named sum
# Sum is then placed within an array named fin
#----------------------------
    col=0
    row=0
    counterOne=0
    counterTwo=0
    outerCount=0
    arrc=0
    fin=()
    sum=0
    while [[ $outerCount -lt $rowNumOne ]]
    do
        while [[ $row -lt $colNumTwo ]]
        do
            tmp=$counterTwo
            sum=0
            while [[ $col -lt $colNumOne ]]
            do
                valTwo=${arrayThree[counterOne]}
                valOne=${arrayOne[counterTwo]}
                val=$(( valOne*valTwo ))
                sum=$((sum+val))
                counterOne=$((counterOne+1))
                counterTwo=$((counterTwo+1))
                col=$((col+1))
            done
            fin[arrc]=$sum
            arrc=$((arrc+1))
            counterTwo=$tmp
            col=0
            row=$((row+1))
        done
        counterOne=0
        row=0
        col=0
        outerCount=$((outerCount+1))
        counterTwo=$((counterTwo+colNumOne))
    done

#----------------------------
# Fin Array is displayed in the required format
#----------------------------
    ittr=0
    val=1
    ittrA=0
    ittrB=0
    while [[ $ittrB -lt $rowNumOne ]]
    do
        while [[ $ittrA -lt $colNumTwo ]]
        do
            ittrA=$((ittrA+1))
            if [[ $val -eq $colNumTwo ]]
            then
                echo "${fin[ittr]}"
            elif [[ $val -ne $colNumTwo ]]
            then
                echo -n -e "${fin[ittr]}\t"
            fi
            ittr=$((ittr+1))
            val=$((val+1))
        done
        val=1
        ittrA=0
        ittrB=$((ittrB+1))
    done

#----------------------------
# Program exits with 0
#----------------------------
exit 0
}


#----------------------------
# Program main takes in input and validates the first parameter
# The program then calls the appropriate function based off the first parameter
# If no parameters are used, the program prints to stderr and exits 1
#----------------------------
    if [ $1 = 'transpose' ]
    then
        $1 "${@:1}"

    elif [ $1 = 'dims' ]
    then
        $1 "${@:1}"

    elif [ $1 = 'add' ]
    then
        $1 "${@:1}"

    elif [ $1 = 'mean' ]
    then
        $1 "${@:1}"

    elif [ $1 = 'multiply' ]
    then
        $1 "${@:1}"

    else
        echo "Invalid Function Call!" 1>&2
        exit 1
    fi
